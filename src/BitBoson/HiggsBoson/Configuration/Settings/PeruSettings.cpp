/* This file is part of higgs-boson.
 *
 * Copyright (c) BitBoson
 *
 * higgs-boson is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * higgs-boson is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with higgs-boson.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Written by:
 *     - Tyler Parcell <OriginLegend>
 */

#include <fstream>
#include <sstream>
#include <iostream>
#include <BitBoson/HiggsBoson/HiggsBoson.h>
#include <BitBoson/HiggsBoson/Utils/ExecShell.h>
#include <BitBoson/HiggsBoson/Configuration/Settings/PeruSettings.h>

using namespace BitBoson;

/**
 * Constructor used to setup the Peru settings object instance
 *
 * @param peruFile String representing the path to the Peru file
 *                 the instance is going to manage/overwrite
 * @param peruSyncDir String representing the path to perform Peru
 *                    sync operations in/to
 */
PeruSettings::PeruSettings(const std::string& peruFile,
        const std::string& peruSyncDir)
{

    // Setup the local member variables
    _peruFile = peruFile;
    _peruSyncDir = peruSyncDir;
}

/**
 * Function used to add a dependency to the Peru settings object
 *
 * @param name String representing the name of the dependency
 * @param type DependencyType representing the type of the dependency
 * @return Boolean indicating whether the dependency was added or not
 */
bool PeruSettings::addDependency(const std::string& name,
        DependencyType type)
{

    // Create a return flag
    bool retFlag = false;

    // Only continue if the provided dependency name doesn't exist
    if (_dependencies.find(name) == _dependencies.end())
    {

        // Add-in the given dependency name
        if (type == DependencyType::TYPE_GIT)
            _dependencies[name]["type"] = "git";
        if (type == DependencyType::TYPE_CURL)
            _dependencies[name]["type"] = "curl";

        // Setup the return value accordingly
        retFlag = true;
    }

    // Return the return flag
    return retFlag;
}

/**
 * Function used to add a property to a dependency in the Peru
 * settings object
 *
 * @param name String representing the name of the dependency
 * @param property String representing the new property to add
 * @param value String representing the value of the new property
 * @return Boolean indicating whether the property was added or not
 */
bool PeruSettings::addDependencyProperty(const std::string& name,
        const std::string& property, const std::string& value)
{

    // Create a return flag
    bool retFlag = false;

    // Only continue if the provided dependency name exists
    if (_dependencies.find(name) != _dependencies.end())
    {

        // Only continue if the provided property name doesn't exist
        if (_dependencies[name].find(property) == _dependencies[name].end())
        {

            // Only continue if the value is non-empty
            if (!value.empty())
            {

                // Add-in the given provided value for the dependency
                _dependencies[name][property] = value;

                // Setup the return value accordingly
                retFlag = true;
            }
        }
    }

    // Return the return flag
    return retFlag;
}

/**
 * Function used to perform a Peru-sync operation on the configured
 * location/directory based on the supplied peru sync directory
 *
 * @return Boolean indcating whether the Peru sync was performed
 */
bool PeruSettings::peruSync()
{

    // Write the Peru file to disk
    auto wroteFile = writePeruFile();

    // Write-out the Peru-sync shell command file
    bool wroteSync = false;
    std::ofstream peruSyncFile;
    peruSyncFile.open(_peruFile + ".sync.sh");
    if (peruSyncFile.is_open())
    {

        // Write-in the standard Higgs-Boson header for the Peru file
        peruSyncFile << "# THIS IS AN AUTOGENERATED FILE USING HIGGS" << std::endl;
        peruSyncFile << "# DO NOT EDIT (UNLESS YOU KNOW WHAT'S UP)" << std::endl;
        peruSyncFile << std::endl;

        // Write-in the actual Peru-sync command
        peruSyncFile << "# Run the Peru-sync Operation" << std::endl;
        peruSyncFile << "peru --file=" << _peruFile;
        peruSyncFile << " --sync-dir=" << _peruSyncDir << " sync --force" << std::endl;

        // Indicate that the sync file was written properly
        wroteSync = true;
    }

    // Run the Peru-sync command and return the results
    return (wroteFile && wroteSync && ExecShell::execWithResponse(
            "Synchronizing External Dependencies",
            HiggsBoson::RunTypeSingleton::getRunTypeCommand() + " " + _peruFile + ".sync.sh"));
}

/**
 * Internal function used to write the internal state to the configured
 * Peru file on disk
 *
 * @return Boolean indcating whether the Peru file was written
 */
bool PeruSettings::writePeruFile()
{

    // Create a return flag
    bool retFlag = false;

    // Open the Peru file
    std::ofstream peruFile;
    peruFile.open(_peruFile);
    if (peruFile.is_open())
    {

        // Write-in the standard Higgs-Boson header for the Peru file
        peruFile << "# THIS IS AN AUTOGENERATED FILE USING HIGGS" << std::endl;
        peruFile << "# DO NOT EDIT (UNLESS YOU KNOW WHAT'S UP)" << std::endl;
        peruFile << std::endl;

        // Write-in the import section of the Peru file
        peruFile << "# peru import information" << std::endl;
        peruFile << "imports:" << std::endl;
        for (const auto& dep : _dependencies)
            peruFile << " " << dep.first << ": " << dep.first <<std::endl;

        // Write-in the catch2 integration for use with Peru
        peruFile << " catch2higgsboson: catch2higgsboson" <<std::endl;
        peruFile << std::endl << std::endl;

        // Write-in the individual modules sections of the Peru file
        peruFile << "#" << std::endl;
        peruFile << "# peru module information" << std::endl;
        peruFile << "#" << std::endl << std::endl;
        for (auto& dep : _dependencies)
        {

            // Actually write-in the individual module section
            peruFile << "# Setup the import for " << dep.first << std::endl;
            peruFile << dep.second["type"] << " module " << dep.first << ":" << std::endl;
            for (const auto& property : dep.second)
                if (property.first != "type")
                    peruFile << " " << property.first << ": " << property.second << std::endl;
            peruFile << std::endl;
        }

        // Write-in the catch2 library download
        peruFile << "# Setup the import for catch2 integration" << std::endl;
        peruFile << "git module catch2higgsboson:" << std::endl;
        peruFile << " rev: v2.12.4" << std::endl;
        peruFile << " url: https://github.com/bitboson-deps/Catch2.git" << std::endl;

        // Close the Peru file
        peruFile.close();

        // If we get here, mark the operation as successful
        retFlag = true;
    }

    // Return the return flag
    return retFlag;
}
