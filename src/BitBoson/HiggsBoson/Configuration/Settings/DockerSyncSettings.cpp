/* This file is part of higgs-boson.
 *
 * Copyright (c) BitBoson
 *
 * higgs-boson is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * higgs-boson is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with higgs-boson.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Written by:
 *     - Tyler Parcell <OriginLegend>
 */

#include <unordered_map>
#include <BitBoson/HiggsBoson/Utils/Utils.h>
#include <BitBoson/HiggsBoson/Utils/Constants.h>
#include <BitBoson/HiggsBoson/Utils/ExecShell.h>
#include <BitBoson/HiggsBoson/Utils/FileWriter.h>
#include <BitBoson/HiggsBoson/Configuration/Settings/DockerSyncSettings.h>

using namespace BitBoson;

/**
 * Constructor used to setup the docker-sync settings object instance
 *
 * @param projectDir String representing the project directory
 * @param projectCacheDir String representing the project cache directory
 * @param projectDirHash String representing the project directory hash
 * @param globalCacheDir String representing the global cache directory
 */
DockerSyncSettings::DockerSyncSettings(const std::string& projectDir,
        const std::string& projectCacheDir, const std::string& projectDirHash,
        const std::string& globalCacheDir)
{

    // Setup local member variables
    _projectDir = projectDir;
    _projectCacheDir = projectCacheDir;
    _projectDirHash = projectDirHash;
    _globalCacheDir = globalCacheDir;
    _containerName = Constants::DOCKER_SYNC_PREFIX + _projectDirHash;

    // Write-out the docker-sync configuration
    writeDockerSyncFile(_projectCacheDir);
    writeDockerSyncFile(_globalCacheDir + "/" + _projectDirHash);

    // Check if the container is already running and only
    // start the container if it is not already running
    bool containerIsRunning = false;
    std::string dockerPsCmd = "docker ps --format \"{{.Names}}\" | grep higgsboson | grep " + _containerName;
    for (std::string containerName : Utils::splitStringByDelimiter(ExecShell::exec(dockerPsCmd), '\n'))
        if (containerName == _containerName)
            containerIsRunning = true;
    if (!containerIsRunning)
    {

        // Start the docker-sync process (after cleanup)
        ExecShell::execWithResponse("Starting docker-sync process",
                "cd " + _projectCacheDir + " && docker-sync start --app_name " + _containerName);

        // Perform an initial sync (since we just started again)
        ExecShell::execWithResponse("Performing docker-sync setup process",
                "cd " + _projectCacheDir + " && docker-sync sync");
    }

    // We also want to take this opportunity to remove any existing
    // sync containers without a corresponding builder container
    removeOrphanedSyncContainers();
}

/**
 * Function used to get the docker-sync volume
 *
 * @return String representing the docker-sync volume
 */
std::string DockerSyncSettings::getVolume()
{

    // Simply construct and return the docker-sync volume name
    return _containerName;
}

/**
 * Internal function used to write the internal state to the configured
 * docker-sync file on disk
 *
 * @param fileLocation String representing the location to store the file
 * @return Boolean indicating whether the docker-sync file was written
 */
bool DockerSyncSettings::writeDockerSyncFile(const std::string& fileLocation)
{

    // Create a return flag
    bool retFlag = false;

    // Open the docker-sync file
    ExecShell::exec("mkdir -p " + fileLocation);
    auto dockerSyncFile = FileWriter(fileLocation + "/docker-sync.yml", true);
    if (dockerSyncFile.isOpen())
    {

        // Write-in the standard Higgs-Boson header for the docker-sync file
        dockerSyncFile.writeLine("# THIS IS AN AUTOGENERATED FILE USING HIGGS");
        dockerSyncFile.writeLine("# DO NOT EDIT (UNLESS YOU KNOW WHAT'S UP)");
        dockerSyncFile.writeLine("");

        // Write-in the sync information for docker-sync to use
        dockerSyncFile.writeLine("# Docker-sync volume information");
        dockerSyncFile.writeLine("version: \"2\"");
        dockerSyncFile.writeLine("syncs:");
        dockerSyncFile.writeLine("  " + _containerName + ":");
        dockerSyncFile.writeLine("    src: '" + _projectDir + "'");
        dockerSyncFile.writeLine("    sync_userid: 1000");
        dockerSyncFile.writeLine("");

        // Close the docker-sync file
        dockerSyncFile.close();

        // If we get here, mark the operation as successful
        retFlag = true;
    }

    // Return the return flag
    return retFlag;
}

/**
 * Internal function used to remove orphaned/abandoned sync-containers
 */
void DockerSyncSettings::removeOrphanedSyncContainers()
{

    // Start by finding all sync and build containers which are running
    std::string dockerPsCmd = "docker ps --format \"{{.Names}}\" | grep higgsboson";
    std::unordered_map<std::string, std::string> syncContainers = {};
    std::unordered_map<std::string, std::string> builderContainers = {};
    for (std::string containerName : Utils::splitStringByDelimiter(ExecShell::exec(dockerPsCmd), '\n'))
    {

        // Verify that this container name has a dash ("-") in it
        auto splitResult = Utils::splitStringByDelimiter(containerName, '-');
        if (splitResult.size() > 1)
        {

            // Extract the hash from the container name
            // NOTE: We don't want to stop this instance's container
            auto containerHash = splitResult[1];
            if (containerHash != _projectDirHash) {

                // Determine if this container is a sync container and note its existence
                auto isDockerSync = std::mismatch(Constants::DOCKER_SYNC_PREFIX.begin(),
                                                  Constants::DOCKER_SYNC_PREFIX.end(),
                                                  containerName.begin());
                if (isDockerSync.first == Constants::DOCKER_SYNC_PREFIX.end())
                    syncContainers[containerHash] = containerName;

                // Determine if this container is a builder container and note its existence
                auto isDockerBuilder = std::mismatch(Constants::DOCKER_HIGGS_BUILDER_PREFIX.begin(),
                                                     Constants::DOCKER_HIGGS_BUILDER_PREFIX.end(),
                                                     containerName.begin());
                if (isDockerBuilder.first == Constants::DOCKER_HIGGS_BUILDER_PREFIX.end())
                    builderContainers[containerHash] = containerName;
            }
        }
    }

    // Next find all sync containers without a corresponding build container
    std::vector<std::pair<std::string, std::string>> orphanedSyncContainers = {};
    for (auto syncContainerItem : syncContainers)
        if (builderContainers[syncContainerItem.first].empty())
            orphanedSyncContainers.emplace_back(syncContainerItem.first, syncContainerItem.second);

    // Finally, stop all orphaned sync container processes
    for (auto syncContainerName : orphanedSyncContainers)
        ExecShell::exec("cd " + _globalCacheDir + "/" + syncContainerName.first
                + " && docker-sync stop --app_name " + syncContainerName.second);
}
