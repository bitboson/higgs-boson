/* This file is part of higgs-boson.
 *
 * Copyright (c) BitBoson
 *
 * higgs-boson is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * higgs-boson is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with higgs-boson.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Written by:
 *     - Tyler Parcell <OriginLegend>
 */

#include <BitBoson/HiggsBoson/Utils/ExecShell.h>
#include <BitBoson/HiggsBoson/Utils/FileWriter.h>
#include <BitBoson/HiggsBoson/Configuration/Settings/DockerSyncSettings.h>

using namespace BitBoson;

/**
 * Constructor used to setup the docker-sync settings object instance
 *
 * @param projectDir String representing the project directory
 * @param projectCacheDir String representing the project cache directory
 * @param projectDirHash String representing the project directory hash
 */
DockerSyncSettings::DockerSyncSettings(const std::string& projectDir,
        const std::string& projectCacheDir, const std::string& projectDirHash)
{

    // Setup local member variables
    _projectDir = projectDir;
    _projectCacheDir = projectCacheDir;
    _projectDirHash = projectDirHash;

    // Write-out the docker-sync configuration
    writeDockerSyncFile();

    // Start the docker-sync process (after cleanup)
    ExecShell::execWithResponse("Starting docker-sync process",
            "cd " + _projectCacheDir + " && docker-sync start");
}

/**
 * Function used to get the docker-sync volume
 *
 * @return String representing the docker-sync volume
 */
std::string DockerSyncSettings::getVolume()
{

    // Simply construct and return the docker-sync volume name
    return _projectDirHash + "-sync";
}

/**
 * Internal function used to write the internal state to the configured
 * docker-sync file on disk
 *
 * @return Boolean indcating whether the docker-sync file was written
 */
bool DockerSyncSettings::writeDockerSyncFile()
{

    // Create a return flag
    bool retFlag = false;

    // Ensure that the cache directory exists
    ExecShell::execLive("mkdir " + _projectCacheDir);

    // Open the docker-sync file
    auto dockerSyncFile = FileWriter(_projectCacheDir + "/docker-sync.yml", true);
    if (dockerSyncFile.isOpen())
    {

        // Write-in the standard Higgs-Boson header for the docker-sync file
        dockerSyncFile.writeLine("# THIS IS AN AUTOGENERATED FILE USING HIGGS");
        dockerSyncFile.writeLine("# DO NOT EDIT (UNLESS YOU KNOW WHAT'S UP)");
        dockerSyncFile.writeLine("");

        // Write-in the sync information for docker-sync to use
        dockerSyncFile.writeLine("# Docker-sync volume information");
        dockerSyncFile.writeLine("version: \"2\"");
        dockerSyncFile.writeLine("syncs:");
        dockerSyncFile.writeLine("  " + _projectDirHash + "-sync:");
        dockerSyncFile.writeLine("    src: '" + _projectDir + "'");
        dockerSyncFile.writeLine("    sync_userid: 1000");
        dockerSyncFile.writeLine("");

        // Close the docker-sync file
        dockerSyncFile.close();

        // If we get here, mark the operation as successful
        retFlag = true;
    }

    // Return the return flag
    return retFlag;
}

/**
 * Destructor used to cleanup the instance
 */
DockerSyncSettings::~DockerSyncSettings()
{

    // Stop and cleanup the docker-sync process on destruction
    ExecShell::execWithResponse("Stopping docker-sync process",
            "cd " + _projectCacheDir + " && docker-sync stop");
}
